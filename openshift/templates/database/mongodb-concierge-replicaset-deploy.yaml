kind: Template
apiVersion: v1
metadata:
  name: mongodb-replication
  annotations:
    description: "MongoDB Replication Example (based on StatefulSet). You must have persistent volumes available in your cluster to use this template."
    iconClass: "icon-mongodb"
    tags: "database,mongodb,replication"

objects:
  - kind: Service
    apiVersion: v1
    metadata:
      name: "${MONGODB_SERVICE_NAME}-${APP_GROUP}-${TAG_NAME}"
    spec:
      ports:
        - name: mongodb
          port: 27017
      selector:
        name: "${MONGODB_SERVICE_NAME}-${APP_GROUP}-${TAG_NAME}"

  - kind: Service
    apiVersion: v1
    metadata:
      name: "${MONGODB_SERVICE_NAME}-${APP_GROUP}-${TAG_NAME}-internal"
      annotations:
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
    spec:
      clusterIP: None
      ports:
        - name: mongodb
          port: 27017
      selector:
        name: "${MONGODB_SERVICE_NAME}-${APP_GROUP}-${TAG_NAME}"

  - kind: ConfigMap
    apiVersion: v1
    metadata:
      name: "${MONGODB_SERVICE_NAME}-${APP_GROUP}-${TAG_NAME}-config"
    data:
      MONGODB_USER: ${MONGODB_USER}
      MONGODB_DATABASE_NAME: ${MONGODB_DATABASE_NAME}
      MONGODB_REPLICA_NAME: ${MONGODB_REPLICA_NAME}
      MONGODB_SERVICE_NAME: ${MONGODB_SERVICE_NAME}-${APP_GROUP}-${TAG_NAME}-internal
    
  - kind: Secret
    apiVersion: v1
    metadata:
      name: "${MONGODB_SERVICE_NAME}-${APP_GROUP}-${TAG_NAME}-secret"
    stringData:
      MONGODB_PASSWORD: ${MONGODB_PASSWORD}
      MONGODB_ADMIN_PASSWORD: ${MONGODB_ADMIN_PASSWORD}
      MONGODB_KEYFILE_VALUE: ${MONGODB_KEYFILE_VALUE}

  - kind: StatefulSet
    apiVersion: apps/v1
    metadata:
      name: "${MONGODB_SERVICE_NAME}-${APP_GROUP}-${TAG_NAME}"
    spec:
      # pets get DNS/hostnames that follow the pattern: ${metadata.name}-NUM.${spec.serviceName}.default.svc.cluster.local
      serviceName: "${MONGODB_SERVICE_NAME}-${APP_GROUP}-${TAG_NAME}-internal"
      selector:
        matchLabels:
          name: "${MONGODB_SERVICE_NAME}-${APP_GROUP}-${TAG_NAME}"
      replicas: 3
      # describes the pod that will be created if insufficient replicas are detected
      template:
        metadata:
          # this label will be used for count running pods
          labels:
            name: "${MONGODB_SERVICE_NAME}-${APP_GROUP}-${TAG_NAME}"
        spec:
          affinity:
            podAntiAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                - labelSelector:
                  matchExpressions:
                    - key: name
                      operator: In
                      values: ${MONGODB_SERVICE_NAME}-${APP_GROUP}-${TAG_NAME}
                  topologyKey: kubernetes.io/hostname
          containers:
            - name: mongo-container
              image: "${MONGODB_IMAGE}"
              ports:
                - containerPort: 27017
              args:
                - "run-mongod-pet"
              volumeMounts:
                - name: mongo-data
                  mountPath: "/var/lib/mongodb/data"
              env:
                - name: MONGODB_USER
                  valueFrom:
                    configMapKeyRef:
                      name: "${MONGODB_SERVICE_NAME}-${APP_GROUP}-${TAG_NAME}-config"
                      key: MONGODB_USER
                - name: MONGODB_DATABASE
                  valueFrom:
                    configMapKeyRef:
                      name: "${MONGODB_SERVICE_NAME}-${APP_GROUP}-${TAG_NAME}-config"
                      key: MONGODB_DATABASE_NAME
                - name: MONGODB_REPLICA_NAME
                  valueFrom:
                    configMapKeyRef:
                      name: "${MONGODB_SERVICE_NAME}-${APP_GROUP}-${TAG_NAME}-config"
                      key: MONGODB_REPLICA_NAME
                - name: MONGODB_SERVICE_NAME
                  valueFrom:
                    configMapKeyRef:
                      name: "${MONGODB_SERVICE_NAME}-${APP_GROUP}-${TAG_NAME}-config"
                      key: MONGODB_SERVICE_NAME
              envFrom:
                - secretRef:
                    name: "${MONGODB_SERVICE_NAME}-${APP_GROUP}-${TAG_NAME}-secret"
              resources:
                requests:
                  memory: "${MEMORY_REQUESTS}"
                  cpu: "${CPU_REQUESTS}"
                limits:
                  memory: "${MEMORY_LIMIT}"
                  cpu: "${CPU_LIMIT}"
              readinessProbe:
                exec:
                  command:
                    - /bin/sh
                    - '-i'
                    - '-c'
                    - >-
                      mongo 127.0.0.1:27017/$MONGODB_DATABASE -u $MONGODB_USER -p
                      $MONGODB_PASSWORD --eval="quit()"
      volumeClaimTemplates:
        - metadata:
            name: mongo-data
            annotations:
              # Uncomment this if using dynamic volume provisioning.
              # https://docs.okd.io/latest/install_config/persistent_storage/dynamically_provisioning_pvs.html
              # volume.alpha.kubernetes.io/storage-class: anything
          spec:
            storageClassName: ${PERSISTENT_VOLUME_CLASS}
            # the volume can be mounted as read-write by a single node
            accessModes: [ ReadWriteOnce ]
            resources:
              requests:
                storage: ${PERSISTENT_VOLUME_SIZE}
parameters:

  - name: APP_GROUP
    displayName: App Group
    required: true
    value: concierge

  - name: TAG_NAME
    displayName: Environment TAG name
    required: true
    value: prod

  - name: MONGODB_USER
    displayName: "MongoDB Connection Username"
    description: "Username for MongoDB user that will be used for accessing the database."
    generate: expression
    from: "user[a-zA-Z0-9]{3}"
    required: true

  - name: MONGODB_PASSWORD
    displayName: "MongoDB Connection Password"
    description: "Password for the MongoDB connection user."
    generate: expression
    from: "[a-zA-Z0-9]{16}"
    required: true

  - name: MONGODB_DATABASE_NAME
    displayName: "MongoDB Database Name"
    description: "Name of the MongoDB database accessed."
    value: concierge
    required: true

  - name: MONGODB_ADMIN_PASSWORD
    displayName: "MongoDB Admin Password"
    description: "Password for the database admin user."
    generate: expression
    from: "[a-zA-Z0-9]{16}"
    required: true

  - name: MONGODB_REPLICA_NAME
    displayName: "Replica Set Name"
    description: "The name of the replica set."
    value: rs0
    required: true

  - name: MONGODB_KEYFILE_VALUE
    displayName: "Keyfile Content"
    description: "The value of the MongoDB keyfile (https://docs.mongodb.com/manual/core/security-internal-authentication/#internal-auth-keyfile)."
    generate: expression
    from: "[a-zA-Z0-9]{255}"
    required: true

  - name: MONGODB_IMAGE
    displayName: "MongoDB Container Image"
    description: "A reference to a supported MongoDB container image."
    value: "image-registry.openshift-image-registry.svc:5000/openshift/mongodb"
    required: true

  - name: MONGODB_SERVICE_NAME
    displayName: "OpenShift Service Name"
    description: "The name of the OpenShift Service exposed for the database."
    value: mongodb
    required: true

  - name: PERSISTENT_VOLUME_SIZE
    displayName: Persistent Volume Size
    description: The size of the persistent volume , e.g. 512Mi, 1Gi, 2Gi.
    required: true
    value: 10Gi

  - name: PERSISTENT_VOLUME_CLASS
    displayName: Persistent Volume Class name
    required: false
    value: netapp-block-standard

  - name: MEMORY_REQUESTS
    displayName: Memory Requests
    description: Requested amount of memory for the container.
    required: true
    value: 512Mi

  - name: MEMORY_LIMIT
    displayName: Memory Limit
    description: Maximum amount of memory the container can use.
    value: 512Mi
      
  - name: CPU_REQUESTS
    displayName: CPU Requests
    description: Requested amount of CPU cores for the container.
    required: true
    value: 500m

  - name: CPU_LIMIT
    displayName: CPU Limit
    description: Maximum amount of CPU cores the container can use.
    required: true
    value: 750m